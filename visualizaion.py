# -*- coding: utf-8 -*-
"""IoT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/158krOdRfjTIu6BqH-RL8ViUsNd7QeAfG
"""

from google.colab import drive
import pandas as pd

# Mount Google Drive
drive.mount('/content/drive')


file_path = '/content/drive/MyDrive/feeds (1) (1).csv'

# Load the dataset
data = pd.read_csv(file_path)
print(data.head())

import pandas as pd
import base64


df = pd.read_csv(file_path)

# Function to decode Base64 values
def decode_base64(value):
    try:
        # Check if the value is a Base64-encoded string
        return base64.b64decode(value).decode('utf-8')
    except Exception:
        # Return the value as is if it cannot be decoded
        return value

# Apply the decoding function to the 'field1' column
df['decoded_field1'] = df['field1'].apply(decode_base64)

# Save the updated dataset with the decoded values
output_file_path = 'decoded_dataset.csv'  # Replace with desired output file name
df.to_csv(output_file_path, index=False)

print("Decoded values have been saved to", output_file_path)

import pandas as pd


df = pd.read_csv("decoded_dataset.csv")

# Ensure the 'decoded_field1' column is numeric
df['decoded_field1'] = pd.to_numeric(df['decoded_field1'], errors='coerce')

# Define labeling thresholds
def label_data(value):
    if value > 70000:  # Threshold for 'High'
        return 'High'
    elif 20000 <= value <= 70000:  # Threshold for 'Dim'
        return 'Dim'
    else:
        return 'Dark'

# Apply labeling function to the 'decoded_field1' column
df['label'] = df['decoded_field1'].apply(label_data)

# Save the labeled dataset to a new CSV file
df.to_csv("labeled_full_dataset.csv", index=False)

# Print confirmation and a preview of the labeled dataset
print("Dataset has been successfully labeled and saved to 'labeled_full_dataset.csv'.")
print(df.head())

df['label'] = df['decoded_field1'].apply(label_data)

# Count the number of samples in each label
label_counts = df['label'].value_counts()

# Display the counts for each label
print("Number of samples in each label:")
for label, count in label_counts.items():
    print(f"{label}: {count} samples")

# Save labeled dataset to a new CSV file (optional)
df.to_csv("labeled_full_dataset.csv", index=False)



import pandas as pd
import plotly.graph_objects as go


df = pd.read_csv("labeled_full_dataset.csv")


label_counts = df['label'].value_counts()


high_count = label_counts.get('High', 0)
dim_count = label_counts.get('Dim', 0)
dark_count = label_counts.get('Dark', 0)


fig = go.Figure()

# High Gauge
fig.add_trace(go.Indicator(
    mode="gauge+number",
    value=high_count,
    title={"text": "High Samples"},
    gauge={
        "axis": {"range": [0, max(high_count, dim_count, dark_count)]},
        "bar": {"color": "red"},
        "steps": [
            {"range": [0, high_count * 0.5], "color": "lightcoral"},
            {"range": [high_count * 0.5, high_count], "color": "red"}
        ],
    },
    domain={"x": [0, 0.3], "y": [0, 1]}  # Position
))

# Dim Gauge
fig.add_trace(go.Indicator(
    mode="gauge+number",
    value=dim_count,
    title={"text": "Dim Samples"},
    gauge={
        "axis": {"range": [0, max(high_count, dim_count, dark_count)]},
        "bar": {"color": "yellow"},
        "steps": [
            {"range": [0, dim_count * 0.5], "color": "lightyellow"},
            {"range": [dim_count * 0.5, dim_count], "color": "yellow"}
        ],
    },
    domain={"x": [0.35, 0.65], "y": [0, 1]}  # Position
))

# Dark Gauge
fig.add_trace(go.Indicator(
    mode="gauge+number",
    value=dark_count,
    title={"text": "Dark Samples"},
    gauge={
        "axis": {"range": [0, max(high_count, dim_count, dark_count)]},
        "bar": {"color": "green"},
        "steps": [
            {"range": [0, dark_count * 0.5], "color": "lightgreen"},
            {"range": [dark_count * 0.5, dark_count], "color": "green"}
        ],
    },
    domain={"x": [0.7, 1], "y": [0, 1]}  # Position
))


fig.update_layout(
    title="Label Distribution Visualization",
    height=400,
    width=1000,
    template="plotly_dark"
)

# Display the figure
fig.show()